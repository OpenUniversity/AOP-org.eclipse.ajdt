Manual testing of build configurations
------------------------------------------


Tests for the examples plugin	What to check
Start with an new, empty workspace	
Test 1:	
File > New > Other
AspectJ > AspectJ Examples > Bean Example
Next > Finish	AJDT config dialog appears if this is the first time.
"Bean Example" project is created in workspace, and a build.ajproperties file 
is created in this project.
Double click build.ajproperties file to open in editor, and switch to 
"build.ajproperties" tab to go to source view	The source view should contain the 
following: "src.includes = src/" (BC_1)
	
Test 2:	 (BC_2)
Repeat test 1 for examples:
Introduction
Observer
TJP	As test 1
	
Test 3:	 (BC_3)
Repeat test 1 for examples:
Telecom
Tracing
Spacewar	These examples have their own .ajproperties files, so check that these 
appear, and one of them is the active one, and that a build.ajproperties file is not created.
	




Tests for activation and including/excluding	
Start with tracing example, let package explorer show all packages and source-files	
Right-click tracev2.ajproperties > activate this configuration	The packages "tracing" 
and "tracing.version2" are activated (filled icon), the others not (empty icon) (BC_4)

Double-click tracev2.ajproperties to open editor, open version2 in resource tree and 
untick Trace.aj, save file	Project gets rebuilt. In package explorer view, package 
"tracing.version2" gets half-filled and the "J" in the icon next to "Trace.aj" gets empty (BC_5)

Try including and excluding source files and packages in the package explorer view and in 
the editor.	Changes in package explorer view should immediately be reflected in editor. 
Changes in editor get reflected in package explorer view as soon as file gets saved. 
(unsaved changes in editor get lost when build configuration gets changed in package explorer) 
In particular, include "Tracing.version.1\TraceMyClasses.aj" into the active build config
and save - there should be problem markers in the problems view and the package explorer. Now
exclude this file and the problem markers should be cleared.
(BC_6)

Use pulldown menu to select "tracelib"	Before clicking on "traclib": is there a tick next to 
"tracev2"? After having clicked on it the project should get rebuilt and the package explorer 
view updated (tracing and tracing.lib are now included) (BC_7)

Project > Active build configuration -> tracev1	Same as before, but now the packages "tracing" 
and "tracing.version1" should be included. (BC_8)
	
(bug 77261) Create a new top level folder (NOT a source folder)_called “nonsrc”, and copy a 
source file into it.	The copied file should be shown to be excluded from the build configuration
Right-click the new file to display the context menu	It should NOT be possible to include 
this file – the include option must be disabled, or absent.
Now make “nonsrc” into a source file (via project properties)	It should now be possible to 
include and exclude this file  (BC_9)
	
(bug 77179) Remove AspectJ nature from the project	
Refactor > Rename the tracing.version1 package to tracing.version10	The rename operation should 
complete successfully without error  (BC_10)




Test working with different project natures	  
Start with tracing example and an empty java project in workspace	
Click on the java project	Pulldown menu gets deactivated, no selection available in 
Project > Active build configuration
Right-Click the java project and select "Properties"	Between "Builders" and "Java 
Compiler", there is exactly one entry named "Java Build Path"
Select "Java Build Path" > "Source"	When expanding the tree, you are able to define exclusion 
patterns (BC_11)

Close the properties page	
	
Click on the tracing example project	Pulldown menu gets activated and the menu "Project" > 
"Active build configuration" gets populated
Right-Click the java project and select "Properties"	Between "Builders" and 
"Java Compiler", there is exactly one entry named "Java Build Path"
Select "Java Build Path" > "Source"	You cannot expand the tree and therefore not define any 
exclusion patterns (BC_12)

Close the properties page	
	
Add a package "p1"  to the java project and create two classes "ClassA" and "ClassB" 
inside the package	
Right-click the java project, select "Convert to AspectJ Project"	A file "build.ajproperties" 
appears in the project folder, source files still included
Right-click the java project, select "Remove AspectJ nature"	
Delete the file build.ajproperties	
Right-Click the java project and select "Properties" > "Java Build Path" > "Source"	
Add an exclusion filter “**/ClassB.java” to exclude ClassB.java, close Properties window	
Right-click the java project, select "Convert to AspectJ Project"	A file "build.ajproperties" 
appears in the project folder, the source files should be included except for ClassB which 
should still be excluded
Right-click the java project, select "Remove AspectJ nature"	Exclusion pattern got lost,
 everything is included now (BC_13)
	



Test import/export .lst files	
Start with tracing example, notrace is active configuration	
Right-Click on notrace.ajproperties > Save as .lst file > Ok	A file "notrace.lst" appears
Double-click "notrace.lst"	Texteditor opens, there are 4 entries
Remove "src\tracing\Square.java", save notrace.lst	
Right-click notrace.lst > Save as .ajproperties file > Ok > Yes	notrace.ajproperties gets 
overwritten, check if the Square class in package tracing is excluded (BC_14)
	



Test delete/save build configurations	
Start with tracing example with notrace as active build configuration	Check if all 5 build 
configurations are available in the pull-down menu on the build button
Delete tracev1.ajproperties	Now, only 4 build configurations should be left in the pull-down 
menu (BC_15)

Delete the active build configuration (notrace.ajproperties)	Another build configuration 
gets selected (randomly) and project rebuilt. notrace is not available anymore in the pull-down 
menu
Delete all remaining .ajproperties files	A new build configuration "build" and its file 
"build.ajproperties" should get created. Check in pull-down-menu if it is available and if
 it is the only one. (BC_16)
	
Project > Active build configuration > Save as.., followed by "ok"	A new file
"build1.ajproperties" gets created, this is now the active build configuration, check if both 
are available in the pull-down-menu
Exclude package "tracing" by right-clicking on it and choosing the appropriate option
Everything should now be excluded (BC_17)
Project > Active build configuration > Save as..	
Change name to "build", and verify the ok button is deactivated, as the name is already
used by an existing configuration. (BC_18)
	

Test the build configuration wizard
Start with any project
Click File > New > Other > AspectJ > Build Configuration.  Leave all the default options.  
The new build configuration should be activated, opened in the editor and should include all 
source files. (BC_19)
Create another build configuration and uncheck the open in editor and activate options.  Ensure 
that the new configuration is not activated or opened in the editor, but that it still includes 
all source files. (BC_20)


Known issues:
This is a list of problems a user might encounter. We did not fix them (yet), because they all are not straight forward to fix, do not cause much inconvenience and should only happen rarely. In some cases it is also not clear what behaviour is expected by the user so it might be best to wait for some feedback before we take further steps.

When including/excluding a package in the package explorer view (eg tracing), not only affects the files in it, but also its subpackages (eg tracing.lib) get excluded/included. This might not be what the user expects because subpackages are displayed in a seperate branch in the package explorer tree and not as a child of its parent package.

When adding aj nature to a project, its exclusion patterns get reset. A user might wonder where they have gone when he removes aj nature again.

When nothing is included, the package explorer view may show errors on excluded files. Normally, to update the package explorer view, we trigger a full build on every build configuration change to clean away old error symbols. However, if you trigger a build with no included files, nothing happens and the old errors/warnings reamain.

When editing the active build configuration in the editor, errors that are caused because some newly excluded files are needed by some included classes, do not get displayed until the next full build happens. (reason: the class file of the excluded files still exists so it does not miss them)

When everything is excluded and the active build configuration gets deleted, another build configuration gets activated as usual, but the package explorer view does not get refreshed.

Testing Project dependencies from checkout of CVS
-------------------------------------------------

(1) Ensure that "Build Automatically" is selected in the Project drop down menu
 
(2) check out the following projects from org.eclipse.ajdt.test:

	     project.dependencies.manual.test.ajprojectB
	     project.dependencies.manual.test.javaprojectA
	     
	(the whole point of this test is that they are checked out from CVS, so don't just
	copy them from somewhere)     
	     
(3) Without doing anything, after Eclipse has finished building the projects after
    checkout - both projects should not have any build errors. In particular, 
    project.dependencies.manual.test.javaprojectA should NOT have the message:
    "The project cannot be built until its prerequisites project.dependencies...ajprojectB
    is built. Cleaning and building all projects is recommended."


Testing project dependencies with empty projects (Bug 46271)
------------------------------------------------

(1) Create an empty AJ project:
 
 	- File > New > AspectJ project
 	- call it "e1"
 	- press "Finish"
 	
(2) Create an empty java project which depends on the AJ project

	- File > New > Project
	- Select "Java Project" and click "Next"
	- Call it "e2" 
	- click "Next"
	- navigate to the "projects" tab and select "e1"
	- press "Finish"

(3) Both projects should build with no build errors - in particular, there should be no 
    prerequisite message	
	 	
Testing build cancelling with project dependencies
--------------------------------------------------

(1) Check out 

		org.eclipse.contribution.visualiser
		org.eclipse.contribution.visualiser.test
		
	from dev.eclipse.org
	
(2) Convert org.eclipse.contribution.visualiser to be an AJ project and ensure that
    the tests project is a java project
(3) build org.eclipse.contribution.visualiser by pressing the build button and
    immediately press the "cancel" button on the build progress dialog.
(4) in the problems view:

		- for org.eclipse.contribution.visualiser: there should be one warning
		  message saying that the build was cancelled
		- for org.eclipse.contribution.visualiser.tests: there should be an 
		  error message saying you need to rebuild prerequiste project
		  org.eclipse.contribution.visualiser (there may also be other error
		  markers)
		  
(5) rebuild org.eclipse.contribution.visualiser by pressing the build button
(6) there should be no error markers on both projects		        		


Testing output jar switch with "external" jars (part of 43674)
--------------------------------------------------------------

(1) Import 

		project.java.X
		project.java.Y
		
	from org.eclipse.ajdt.test\test projects
	
(2) Check that they both build with no errors and that project.java.X has a project
    dependency on project.java.Y:
    
    	- right click on project.java.X
    	- navigate to properties
    	- in the resulting wizard, highlight "Java Build Path"
    	- go to the "projects" tab
    	- ensure that the box next to project.java.Y has a tick in it
    	- click "OK"
    	
(3) Convert project.java.Y to be an AJ project:

		- right click on project.java.Y
		- select "Convert to AspectJ project"
		
(4) Both projects should still not report any build errors

(5) Choose to send project.java.Y's output to an external jar file
    (external to the workspace):

    	- right click on project.java.Y
    	- navigate to properties
    	- in the resulting wizard, highlight "AspectJ"
    	- enter a fully qualified string in the outjar field i.e. C:\temp\firstjar.jar
    	- click "ok"
    	
(6) Build project.java.Y by pressing the build button

(7) project.java.X should now have jar file "C:\temp\firstjar.jar" on it's classpath

		- a new node entitled "firstjar.jar - C:\temp" should appear in the
		  package explorer under project.java.X
		- if you open up the .classpath file, then it contains an entry with path 
		  "C:/temp/firstjar.jar"
		  
(8) Decide to send project.java.Y's output to a new external jar file with a name
    that has case differences to the filesystem:

    	- right click on project.java.Y
    	- navigate to properties
    	- in the resulting wizard, highlight "AspectJ"
    	- enter a fully qualified string in the outjar field i.e. c:\TEMP\secondjar.jar
    	  (note the change in case of "c" and "TEMP" - the outjar entry should pick
    	  the correct place - this is part of the test)
    	- click "ok"

(9) Build project.java.Y by pressing the build button

(10) project.java.X should now have jar file "C:\temp\secondjar.jar" on it's classpath
     (note the case)

		- a new node entitled "secondjar.jar - C:\temp" should appear in the
		  package explorer under project.java.X
		- if you open up the .classpath file, then it contains an entry with path 
		  "C:/temp/secondjar.jar"

(11) project.java.X should NOT have jar file "firstjar.jar - C:\temp" on it's classpath
     (note the case)

		- there is no node entitled "C:\temp\firstjar.jar" in the package explorer under
		  project.java.X
		- if you open up the .classpath file, then it doesn't contain an entry with path 
		  "C:/temp/firstjar.jar"		       	

(12) Decide to not to send project.java.Y's output to an external jar file:

    	- right click on project.java.Y
    	- navigate to properties
    	- in the resulting wizard, highlight "AspectJ"
    	- remove the entry in the outjar field
    	- click "ok"

(13) Build project.java.Y by pressing the build button

(14) project.java.X should NOT have jar file "C:\temp\secondjar.jar" on it's classpath
     (note the case)

		- there is no node entitled "secondjar.jar - C:\temp" in the package explorer under
		  project.java.X
		- if you open up the .classpath file, then it doesn't contain an entry with path 
		  "C:/temp/secondjar.jar"		    



PLUGIN PROJECTS
---------------

Setup required:

- Clean workbench
- Check out from CVS the org.eclipse.contribution.visualiser 
  and org.eclipse.contribution.visualiser.tests projects
- Ensure Auto building is enabled (Project > Build automatically)
- Bring up the AJDT Event trace view (Window > Show View > Other > AspectJ > Event Trace)
- If you’re running in a runtime workbench, then you’ll also need to have the org.aspecth.ajde 
  project in your runtime workbench (otherwise neither of the visualiser projects will build)


Test sequence:
--------------   

(1) Convert visualiser project to be an AspectJ project (right click to bring up projects 
    context menu > Convert to AspectJ project) choosing to add the org.aspectj.ajde project 
    as a dependency

    RESULT: - Both projects build ok with no error markers in the problems view

(2) Run the visualiser tests by selecting AllTests and Run as Junit Plugin Test 

    RESULT: - All visualiser tests should pass  

(3) Remove AspectJ nature from visualiser plugin (right click to bring up context menu 
    > Remove AspectJ Nature 

    RESULT: - Both projects should build ok with no error markers in the problems view 
 
(4) Run the visualiser tests by selecting AllTests and Run as Junit Plugin Test 

    RESULT: - All visualiser tests should pass  

(5) Convert both the visualiser and visualiser.tests projects to be AspectJ projects 

    RESULT: - Both projects should build ok with no error markers in the problems view  

(6) Run the visualiser tests by selecting AllTests and Run as Junit Plugin Test 

    RESULT: - All visualiser tests should pass 
    
    

      	     

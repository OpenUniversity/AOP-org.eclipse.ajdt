<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <title>
      How do I setup an AJDT development environment in Eclipse? 
    </title>
    <link rel="stylesheet" href="../../book.css" charset="ISO-8859-1" type="text/css">
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <meta http-equiv="Content-Style-Type" content="text/css">
  </head>
  <body>
    <h1>
      How do I setup an AJDT development environment in Eclipse? 
    </h1>
    <p>There are several stages to this: building AJDT, running the
    correctness tests, running the performance tests, and creating an
    Eclipse update site. The first two stages are probably sufficient
    for most purposes. Note that the steps required for the first
    stage depend on whether you are using Eclipse 3.0 or 3.1.</p>

    <h4>Building AJDT</h4>

    <p>Note first of all that in order to build AJDT you may
    need to increase the memory available to Eclipse. This is
    typically done by passing something like <code>"-vmargs -Xmx256m"</code> to
    the Eclipse launcher.</p>

    <p>Start with a clean workspace under Eclipse 3.0.1 or the latest
    milestone build of Eclipse 3.1. Now open the CVS Repository Exploring 
    perspective. Right-click on the CVS Repositories view, then click "New" > "Repository
    Location". Host = dev.eclipse.org, Repository path =
    /home/technology, Username = anonymous, password should be left
    blank. Connection type = pserver. Click "Finish". Use the CVS
    Repositories view to navigate to
    org.eclipse.ajdt/AJDT1.2src. Select the following projects,
    right-click and select "Check out" from the context menu:</p>
 
    <ul>
      <li>org.aspectj.ajde,</li>
      <li>org.aspectj.runtime,</li>
      <li>org.eclipse.ajdt.core,</li>
      <li>org.eclipse.ajdt.examples,</li>
      <li>org.eclipse.ajdt.ui,</li>
      <li>org.eclipse.contribution.visualiser,</li>
      <li>org.eclipse.contribution.xref.core,</li>
      <li>org.eclipse.contribution.xref.ui.</li>
    </ul>

    <p>Eclipse will build the projects as you import them. Some
    projects contain source code for both Eclipse 3.0 and 3.1, so the
    next step is to ensure the correct build configurations are being
    used:</p>

   <ul>
     <li>Expand each of the following projects in the package explorer
     in turn: org.eclipse.ajdt.core, and org.eclipse.ajdt.ui.</li>

     <li>Eclipse 3.0: Locate the build30.ajproperties file in each
     project, then right-click and select "Activate this
     configuration", if it is not the active configuration
     already. This will ensure that the 3.0.x versions of all files
     are being built. If you installed a recent version of AJDT, the
     build30.ajproperties files should be activated by default.</li>

     <li>Eclipse 3.1: Locate the build31.ajproperties file in each
     project, then right-click and select "Activate this
     configuration", if it is not the active configuration
     already. This will ensure that the 3.1 versions of all files are
     being built. If you installed a recent version of AJDT, you will
     need to activate all of the build31.ajproperties files, because
     the Eclipse 3.0 versions will be chosen as the default ones.</li>
   </ul>

   <p>Now you're ready to run the plugins inside Eclipse:</p>

   <ul>
     <li>Switch to the Java Perspective if you're not already in
     it...</li>

     <li>From the run menu select "Run..."</li>

     <li>Select "Run-time workbench" (this is called "Eclipse
     Application" on Eclipse 3.1) and click new</li>

     <li>Give your launch configuration a name, and click "Run"</li>

     <li>Subsequent runs can simpy use the launch configuration you
     just created</li>
   </ul>

   <h4>Running the correctness tests</h4>

   <p>The next step is to add the test projects. These can be used to
   verify that everything is okay with your environment and
   configuration, plus of course to verify the integrity of any
   changes you might make. Switch back to the CVS perspective and
   check-out the following projects:</p>

   <ul>
     <li>org.eclipse.ajdt.core.tests</li>
     <li>org.eclipse.ajdt.test</li>
     <li>org.eclipse.contribution.visualiser.tests</li>
     <li>org.eclipse.contribution.xref.core.test</li>
     <li>org.eclipse.contribution.xref.ui.test</li>
   </ul>

   <p>There are two steps to running all of the tests. The
   first is to run the AJDT core specific tests found in
   org.eclipse.ajdt.core.tests, and the second is to run
   the remaining tests.</p>

   <p>To run the AJDT core specific tests expand the
   org.eclipse.ajdt.core.test project, then the src folder, then the
   org.eclipse.ajdt.core.tests package. Now select the AllAJDTCoreTests.java file,
   right-click and select "Run As" &gt; "JUnit Plug-in Test". A new
   runtime workbench should then be launched and the tests run inside
   that. Progress and test results can be observed from the JUnit
   Eclipse view.</p>
   
   <p>You can then run all of the remaining tests by expanding the
   org.eclipse.ajdt.test project, then the testsrc folder, then the
   org.eclipse.ajdt.test package. Now select the AllTests.java file,
   right-click and select "Run As" &gt; "JUnit Plug-in Test". A new
   runtime workbench should then be launched and the tests run inside
   that. Progress and test results can be observed from the JUnit
   Eclipse view.</p>

   <p>Now you're ready to start enhancing the plugins by adding to or
   extending the code in your projects - just use run (or debug) to
   try out your changes. When you have a patch to submit to the
   project, go to the "Team" item in the project context menu and
   select "Create Patch...". Naturally the correctness tests should
   also be run, and new tests written to accompany fixes or new
   features.</p>

   <h4>Running the performance tests</h4>

   <p>Work is underway on a new plugin,
   org.eclipse.ajdt.tests.performance, to monitor the performance of
   every build of AJDT. This plugin has dependencies on a number of
   Eclipse test projects, which are not shipped in the base Eclipse
   SDK. These instructions will be updated later when the plugin is
   fully up and running.

   <h4>Creating an update site</h4>

   <p>Each of the AJDT plugin projects also contains an Ant build
   file, "build.xml." The default target builds a packaged version of
   the project in question. Check-out the "UpdateSite" project from
   CVS, and use the build.xml file in that project to invoke a master
   build that builds an entire update site structure in its "dist"
   directory. To run the build.xml file inside Eclipse, you need to do
   "Run As > Ant Build..." to bring up the run configuration dialog,
   then go to the "JRE" tab and select "Run in the same JRE as the
   workspace". This is required for the "eclipse.incrementalBuild" Ant
   task to work.</p>

   <p>You can now test the built update site as follows:</p>

   <ul>
     <li>Copy the contents of the dist directory to a clean directory,
     outside of your workspace. For example, "ajupdate."</li>

     <li>From the help menu of the Eclipse in which you wish to
     install the AspectJ feature, choose "Help" &gt; "Software
     Updates" &gt; "Find and Install..." and follow the steps outlined
     earlier in this section.</li>
   </ul>

    <p>
       <a href="../../../notices.html"><img src="../../../cpy.gif" border="0" alt="Legal notices" width="324" height="14"></a>
    </p>
  </body>
</html>


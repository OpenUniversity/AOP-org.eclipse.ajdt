
//(Demo'ers note: Alt-P-L will initiate a rebuild all - looks better than going to the
// menu all the time as gives appearance that build is just happening where it's needed).

// REFACTORING updateHistory into an aspect:
// -----------------------------------------

// Policy: updateHistory should be called after any setXX operation
//         on a FigureElement

// 1) Create new aspect "HistoryManagement"

	import figures.Canvas;
	import figures.FigureElement;


// 2) Find all places it is currently being called

	pointcut canvasHistoryUpdate() : call(void Canvas.updateHistory(..));

	declare warning: canvasHistoryUpdate() && !within(HistoryManagement): 
		"Canvas.updateHistory should not be called outide of HistoryManagement";

// 3) Write some advice to capture the policy

	pointcut figureElementUpdate( ) : call(void FigureElement+.set*(..));
	
	after() returning: figureElementUpdate( ) {
		Canvas.updateHistory();	
	}
	
// 4) Comment out calls to updateHistory, and turn into declare error


// ARCHITECTURAL ENFORCEMENT through aspect:
// -----------------------------------------

// Policy: private fields in FigureElements should only be updated via setter methods

// 1) Create new aspect "Enforcement"

	import figures.FigureElement;

// 2) Write pointcuts to describe private field updates on FigureElements

	pointcut privateFieldUpdate( ) : set(private * FigureElement+.*);
	pointcut insideSetMethod( ) : withincode(* FigureElement+.set*(..));
	
// 3) Declare a warning if private fields are set outside of setters

	declare warning: privateFieldUpdate( ) && !insideSetMethod( ) :
		"private fields should only be updated through setter methods";
		
// 4) Oops, we forgot about constructors

	pointcut insideConstructor( ) : withincode(FigureElement+.new(..));
	
	declare warning: privateFieldUpdate( ) &&
					 !(insideSetMethod( ) || insideConstructor( )) :
		"private fields should only be updated through setter methods";

// 5) Fix the remaining errors, and turn into declare error					 


// PART II - precondition checking
// -------------------------------

// Policy: x and y coords for points must be non-negative

// 1) Extend Enforcement aspect

	import figures.Point;

	pointcut pointCoordUpdate( ) : set(int Point+.*);
	
	before( int coord ) : pointCoordUpdate( ) && args( coord ) {
		if ( coord < 0 ) { throw new IllegalArgumentException( "too small" ); }	
	}

// 2) Update Main

// 3) Rebuild & run

// PRODUCT LINES / CONFIGURATION FILES
// -------------------------------------

//  Policy: log every time a new line is created

// 1) Create a new LineLogger aspect

	import figures.Line;

	pointcut lineCreation( ) :  execution( Line+.new(..) );
							  
	after( Line l ) returning: lineCreation( ) && target( l ) {
		Log.log( l.toString() ):
	}

// 2) Build, Run and show output

// 3) Create new build config file "Production.lst"

// 4) Deselect LineLogger aspect

// 5) Select Production build configuration

// 6) Rebuild and run to show feature removed

// 7) Select .generated.lst from drop-down menu

// 8) Rebuild and run to show feature activated again.
###############################################################################
# Copyright (c) 2003, 2006 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
# 
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################

# -- AJDT 1.6.4 released
# 1.6.4.20090318134025 - 1.6.4 dev - SERIOUS changes: 268827 (incremental build) 268419 (dynamic proxies)
# 1.6.4.20090320104300 - 1.6.4 dev - new callback to AJDT on class file removal
# 1.6.4.20090320164000 - refix of removal
# 1.6.4.20090323091000 - removal generalized to resources/aop-ajc.xml and outjar
# 1.6.4.20090323215000 - unqualified references in handles, support for aspectj depends on java project
# 1.6.4.20090324152500 - tjpsp.getId(), synchronization wrapped map access in AjType
# 1.6.4.20090325125200 - 263666
# 1.6.4.20090325212600 - incremental aspect path build improvements in multi project setup (270033)
# 1.6.4.20090326115100 - 269522: handle counts for advice 
# 1.6.4.20090327134400 - annotation style around advice handles
# 1.6.4.20090329215800 - incremental change analysis changes and better diagnostics
# 1.6.4.20090402160317 - 1.6.4 final
# 1.6.5.20090406084900 - 1.6.5 dev - inpath handles, 4 double slot around advice
# 1.6.5.20090406122600 - 1.6.5 dev - inpath map
# 1.6.5.20090407083400 - 1.6.5 dev - very rudimentary incremental inpath model
# 1.6.5.20090407153400 - 1.6.5 dev - handles for inpath jar entries
# 1.6.5.20090430151200 - 1.6.5 dev - various minor fixes
# 1.6.5.20090520110800 - 1.6.5 dev - default itd ctor change and default package incremental build relationship fix
# 1.6.5.20090528125400 - 1.6.5 dev - handles for dec anno
# 1.6.5.20090612153600 - 1.6.5 dev - various small fixes plus diagnostics for OOM
# 1.6.5.20090618034232 - 1.6.5 final (ajc -version gives this timestamp)
# 1.6.6.20090723171200 - 1.6.6 dev build - lost packages on incremental builds
# 1.6.6.20090813103100 - 1.6.6 dev build - dec anno type name in model
# 1.6.6.20090915100000 - 1.6.6 dev build - aop.xml compile time config and J5 update
# 1.6.6.20090930185500 - 1.6.6 final
# 1.6.7.20091013065200 - 1.6.7 dev (call/this)
# 1.6.7.20091113111100 - 1.6.7 dev - timer changes and all optimization changes
# 1.6.7.20091113122900 - 1.6.7 dev - timers non periodic under AJDT, just produced at the end
# 1.6.7.20091116144300 - 1.6.7 dev - type demotion on by default. runminimalmemory off by default
# 1.6.7.20091116145400 - 1.6.7 dev - oops! turned type demotion on for compile time too, reverted to just off for LTW
# 1.6.7.20091126170000 - 1.6.7 dev - hierarchy builder npe, google code dispatch problem fix
# 1.6.7.20091127083600 - 1.6.7 dev - guards guards
# 1.6.7.20091214160800 - 1.6.7 dev - almost final, latest LTW changes
# 1.6.7.20091231194938 - 1.6.7 final
# 1.6.7.20091231194938 - 1.6.7 final
# 1.6.7.20100105084524 - 1.6.7.a extra bug fix for ltw
ajde.version=1.6.7.20100105084524
  
builder=.

ajcArgFile=${builder}/iajc-args.txt

#####################
# Parameters describing how and where to execute the build.
# Typical users need only update the following properties:
#    baseLocation - where things you are building against are installed
#    bootclasspath - The base jars to compile against (typicaly rt.jar)
#    configs - the list of {os, ws, arch} configurations to build.  
#
# Of course any of the settings here can be overridden by spec'ing 
# them on the command line (e.g., -DbaseLocation=d:/eclipse

############# PRODUCT/PACKAGING CONTROL #############
product=/plugin or feature id/path/to/.product
runPackager=true

#Set the name of the archive that will result from the product build.
#archiveNamePrefix=

# The prefix that will be used in the generated archive.
archivePrefix=eclipse

# The location underwhich all of the build output will be collected.
collectingFolder=${archivePrefix}

# The list of {os, ws, arch} configurations to build.  This 
# value is a '&' separated list of ',' separate triples.  For example, 
#     configs=win32,win32,x86 & linux,motif,x86
# By default the value is *,*,*
#configs=win32, win32, x86 & \
#	linux, gtk, ppc &\
# linux, gtk, x86 & \
#	linux, gtk, x86_64 & \
#	linux, motif, x86 & \
#	solaris, motif, sparc & \
#	solaris, gtk, sparc & \
#	aix, motif, ppc & \
#	hpux, motif, PA_RISC & \
#	macosx, carbon, ppc

# By default PDE creates one archive (result) per entry listed in the configs property.
# Setting this value to try will cause PDE to only create one output containing all 
# artifacts for all the platforms listed in the configs property.
#groupConfigurations=true

#The format of the archive. By default a zip is created using antZip.
#The list can only contain the configuration for which the desired format is different than zip.
#archivesFormat=win32, win32, x86 - antZip& \
#	linux, gtk, ppc - antZip &\
#    linux, gtk, x86 - antZip& \
#	linux, gtk, x86_64 - antZip& \
# linux, motif, x86 - antZip& \
#	solaris, motif, sparc - antZip& \
#	solaris, gtk, sparc - antZip& \
#	aix, motif, ppc - antZip& \
#	hpux, motif, PA_RISC - antZip& \
#	macosx, carbon, ppc - antZip
	
#Set to true if you want the output to be ready for an update jar (no site.xml generated)
#outputUpdateJars = false

#Set to true for Jnlp generation
#codebase should be a URL that will be used as the root of all relative URLs in the output.
#generateJnlp=false
#jnlp.codebase=<codebase url>
#jnlp.j2se=<j2se version>

#Set to true if you want to sign jars
#signJars=false
#sign.alias=<alias>
#sign.keystore=<keystore location>
#sign.storepass=<keystore password>

#Arguments to send to the zip executable
zipargs=

#Arguments to send to the tar executable
tarargs=

#Control the creation of a file containing the version included in each configuration - on by default 
#generateVersionsLists=false

############## BUILD NAMING CONTROL ################
# The directory into which the build elements are fetched and where
# the build takes place.
buildDirectory=${user.home}/eclipse.build

# Type of build.  Used in naming the build output.  Typically this value is
# one of I, N, M, S, ...
buildType=I

# ID of the build.  Used in naming the build output.
buildId=TestBuild

# Label for the build.  Used in naming the build output
buildLabel=${buildType}.${buildId}

# Timestamp for the build.  Used in naming the build output
timestamp=007

#The value to be used for the qualifier of a plugin or feature when you want to override the value computed by pde.
#The value will only be applied to plugin or features indicating build.properties, qualifier = context 
#forceContextQualifier=DEVELOPMENT

#This is the value that will be prefixed to all version qualifiers
#Use e34x for Eclispe 3.4 builds and e35x for 3.5 builds, etc
#This value will be ignored if forceContextQualifier is set above or from the command line
qualPrefix=e35x


#Enable / disable the generation of a suffix for the features that use .qualifier. 
#The generated suffix is computed according to the content of the feature   
#generateFeatureVersionSuffix=true

############# BASE CONTROL #############
# Settings for the base Eclipse components and Java class libraries 
# against which you are building.
# Base location for anything the build needs to compile against.  For example,
# in most RCP app or a plug-in,  the baseLocation should be the location of a previously
# installed Eclipse against which the application or plug-in code will be compiled and the RCP delta pack.

#base=<path/to/parent/of/eclipse>
baseLocation=${base}/eclipse
#Os/Ws/Arch/nl of the eclipse specified by baseLocation
baseos=win32
basews=win32
basearch=x86

#pluginPath is a list of locations in which to find plugins and features.  This list is separated by the platform file separator (; or :)
#a location is one of:  
#- the location of the jar or folder that is the plugin or feature : /path/to/foo.jar or /path/to/foo
#- a directory that contains a /plugins or /features subdirectory
#- the location of a feature.xml, or for 2.1 style plugins, the plugin.xml or fragment.xml
#pluginPath=

skipBase=true
#eclipseURL=<url for eclipse download site>
#eclipseBuildId=<Id of Eclipse build to get>
#eclipseBaseURL=${eclipseURL}/eclipse-platform-${eclipseBuildId}-win32.zip


############# MAP FILE CONTROL ################
# This section defines CVS tags to use when fetching the map files from the repository.
# If you want to fetch the map file from repository / location, change the getMapFiles target in the customTargets.xml

skipMaps=true
mapsRepo=:pserver:anonymous@example.com/path/to/repo
mapsRoot=path/to/maps
mapsCheckoutTag=HEAD

#tagMaps=true
mapsTagTag=v${buildId}


############ REPOSITORY CONTROL ###############
# This section defines properties parameterizing the repositories where plugins, fragments
# bundles and features are being obtained from. 

# The tags to use when fetching elements to build.
# By default thebuilder will use whatever is in the maps.  
# This value takes the form of a comma separated list of repository identifier (like used in the map files) and the 
# overriding value
# For example fetchTag=CVS=HEAD, SVN=v20050101
# fetchTag=HEAD
skipFetch=true


############# JAVA COMPILER OPTIONS ##############
# The location of the Java jars to compile against.  Typically the rt.jar for your JDK/JRE
#bootclasspath=${java.home}/lib/rt.jar

# specific JRE locations to compile against. These values are used to compile bundles specifying a 
# Bundle-RequiredExecutionEnvironment. Uncomment and set values for environments that you support
#CDC-1.0/Foundation-1.0= /path/to/rt.jar
#CDC-1.1/Foundation-1.1=
#OSGi/Minimum-1.0=
#OSGi/Minimum-1.1=
#JRE-1.1=
#J2SE-1.2=
#J2SE-1.3=
#J2SE-1.4=
#J2SE-1.5=
#JavaSE-1.6=
#PersonalJava-1.1=
#PersonalJava-1.2=
#CDC-1.0/PersonalBasis-1.0=
#CDC-1.0/PersonalJava-1.0=
#CDC-1.1/PersonalBasis-1.1=
#CDC-1.1/PersonalJava-1.1=

# Specify the output format of the compiler log when eclipse jdt is used
logExtension=.log

# Whether or not to include debug info in the output jars
javacDebugInfo=false 

# Whether or not to fail the build if there are compiler errors
javacFailOnError=true

# Enable or disable verbose mode of the compiler
javacVerbose=true

# Extra arguments for the compiler. These are specific to the java compiler being used.
#compilerArg=

# Default value for the version of the source code. This value is used when compiling plug-ins that do not set the Bundle-RequiredExecutionEnvironment or set javacSource in build.properties
#javacSource=1.3

# Default value for the version of the byte code targeted. This value is used when compiling plug-ins that do not set the Bundle-RequiredExecutionEnvironment or set javacTarget in build.properties.
#javacTarget=1.1



/*******************************************************************************
 * Copyright (c) 2006 IBM Corporation and others. All rights reserved. This
 * program and the accompanying materials are made available under the terms of
 * the Eclipse Public License v1.0 which accompanies this distribution, and is
 * available at http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: IBM Corporation - initial API and implementation 
 * 				 Steve Young   - initial version
 ******************************************************************************/
package org.eclipse.ajdt.ui.visual.tests;

import java.util.Iterator;
import java.util.List;

import org.eclipse.ajdt.internal.ui.preferences.AspectJPreferences;
import org.eclipse.ajdt.internal.ui.wizards.NewAspectCreationWizard;
import org.eclipse.ajdt.internal.ui.wizards.NewAspectWizardPage;
import org.eclipse.ajdt.internal.ui.xref.XRefUtils;
import org.eclipse.ajdt.ui.AspectJUIPlugin;
import org.eclipse.contribution.xref.ui.views.XReferenceView;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IPackageFragment;
import org.eclipse.jdt.core.IPackageFragmentRoot;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.ui.JavaUI;
import org.eclipse.jdt.ui.actions.AbstractOpenWizardAction;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.IWizardPage;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.INewWizard;
import org.eclipse.ui.IViewReference;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.WorkbenchException;

/**
 * Test for static method which handles whether or not the Cross Reference view
 * should be shown automatically when an Aspect is opened in the AspectJ editor, and 
 * whether such behaviour should be repeated automatically in the future.
 */
public class XReferenceViewAutoOpenTest extends VisualTestCase {
	private IWorkbench workbench = null;

	private static final String TEST_PROJECT_NAME = "Simple AJ Project"; //$NON-NLS-1$

	private IProject testProject = null;

	private IJavaProject javaTestProject = null;

	private IPackageFragmentRoot packageFragmentRoot = null;

	private IPackageFragment defaultPackage = null;

	private static final String DEFAULT_PACKAGE_NAME = ""; //$NON-NLS-1$

	private NewAspectCreationWizard newAspectCreationWizard = null;

	private IPreferenceStore store = null;

	// Store state across invocations of the various test methods
	private static boolean initialPromptForAutoOpenCrossRefView;
	private static boolean initialAutoOpenCrossRefView;
	private static boolean lastTest = false;

	
	protected void setUp() throws Exception {

		super.setUp();

		closeXRefView();

		workbench = PlatformUI.getWorkbench();

		// Setup a simple AJ project
		testProject = createPredefinedProject(TEST_PROJECT_NAME); //$NON-NLS-1$
		javaTestProject = JavaCore.create(testProject);
		waitForJobsToComplete();

		IPackageFragmentRoot[] packageFragmentRoots = javaTestProject.getPackageFragmentRoots();
		packageFragmentRoot = packageFragmentRoots[0];
		defaultPackage = packageFragmentRoots[0].getPackageFragment(DEFAULT_PACKAGE_NAME);

		waitForJobsToComplete();

		// Query the current user settings, in order to restore them later
		store = AspectJUIPlugin.getDefault().getPreferenceStore();
	}

	protected void tearDown() throws Exception {
		 super.tearDown();
		 
		 // Only to be performed after the last test completes!
		 if(lastTest) {
			// restore user preferences to starting values
			store.setValue(AspectJPreferences.PROMPT_FOR_AUTO_OPEN_CROSS_REF_VIEW, initialPromptForAutoOpenCrossRefView);
			store.setValue(AspectJPreferences.AUTO_OPEN_CROSS_REF_VIEW, initialAutoOpenCrossRefView);
		 }
	}

	/**
	 * This test declines both the option to open the Cross References view and
	 * the option to remember the decision.
	 */
	public void testAutoOpenCrossReferenceView1() throws CoreException {
		
		/* 
		 * Only to be performed prior to the first test, hence not in setUp:
		 * Query the current user settings, in order to restore them later
		 */ 
		initialPromptForAutoOpenCrossRefView = store.getBoolean(AspectJPreferences.PROMPT_FOR_AUTO_OPEN_CROSS_REF_VIEW);
		initialAutoOpenCrossRefView = store.getBoolean(AspectJPreferences.AUTO_OPEN_CROSS_REF_VIEW);

		//TODO: Remove this setting
		initialAutoOpenCrossRefView = true;
		initialPromptForAutoOpenCrossRefView = true;
		
		// Set start values
		store.setValue(AspectJPreferences.PROMPT_FOR_AUTO_OPEN_CROSS_REF_VIEW, true);
		store.setValue(AspectJPreferences.AUTO_OPEN_CROSS_REF_VIEW, true);

		// Check things are as expected, view-wise, to start...
		assertXRefViewClosed();
		
		/*
		 * Kick off the creation of a new Aspect, passing the name and the decision NOT 
		 * to open the cross reference view.
		 */ 
		runCreateAspectWizard("testAutoOpenCrossReferenceViewAspect1", false, false);

		/*
		 * Very important - this is needed to keep things on the correct time
		 * line (results will not be as expected if this call is ommitted)
		 */
		waitForJobsToComplete();

		// Check things are as expected, view-wise...
		assertXRefViewClosed();

		// Check state of preference store - should we do this by creating another aspect as well/instead? 
		assertTrue("Preferences should still be set to prompt user re: opening Cross reference View", AspectJUIPlugin
				.getDefault().getPreferenceStore().getBoolean(AspectJPreferences.PROMPT_FOR_AUTO_OPEN_CROSS_REF_VIEW));
		assertTrue("Preferences should still be set to open the Cross Reference View on Aspect creation", AspectJUIPlugin
				.getDefault().getPreferenceStore().getBoolean(AspectJPreferences.AUTO_OPEN_CROSS_REF_VIEW));
	}

	/**
	 * This test accepts the option to open the Cross References view but
	 * declines the option to remember the decision.
	 */
	public void testAutoOpenCrossReferenceView2() throws CoreException {
		/*
		 * Kick off the creation of a new Aspect, passing the name and the decision to open 
		 * the cross reference view.
		 */ 
		runCreateAspectWizard("testAutoOpenCrossReferenceViewAspect2", true, false);

		/*
		 * Very important - this is needed to keep things on the correct time
		 * line (results will not be as expected if this call is ommitted)
		 */
		waitForJobsToComplete();

		// Check things are as expected, view-wise...
		assertXRefViewOpen();

		// Check state of preference store - should we do this by creating another aspect as well/instead? 
		assertTrue("Preferences should still be set to prompt user re: opening Cross reference View", AspectJUIPlugin
				.getDefault().getPreferenceStore().getBoolean(AspectJPreferences.PROMPT_FOR_AUTO_OPEN_CROSS_REF_VIEW));
		assertTrue("Preferences should still be set to open the Cross Reference View on Aspect creation", AspectJUIPlugin
				.getDefault().getPreferenceStore().getBoolean(AspectJPreferences.AUTO_OPEN_CROSS_REF_VIEW));
	}

	/**
	 * This test declines the option to open the Cross References view but
	 * accepts the option to remember the decision.
	 */
	public void testAutoOpenCrossReferenceView3() throws CoreException {
		/*
		 * Kick off the creation of a new Aspect, passing the name and the decision to open 
		 * the cross reference view.
		 */ 
		runCreateAspectWizard("testAutoOpenCrossReferenceViewAspect3", false, true);

		/*
		 * Very important - this is needed to keep things on the correct time
		 * line (results will not be as expected if this call is ommitted)
		 */
		waitForJobsToComplete();

		// Check things are as expected, view-wise...
		assertXRefViewClosed();

		// Check state of preference store - should we do this by creating another aspect as well/instead? 
		assertFalse("Preferences should no longer be set to prompt user re: opening Cross reference View", AspectJUIPlugin
				.getDefault().getPreferenceStore().getBoolean(AspectJPreferences.PROMPT_FOR_AUTO_OPEN_CROSS_REF_VIEW));
		assertFalse("Preferences should no longer be set to open the Cross Reference View on Aspect creation", AspectJUIPlugin
				.getDefault().getPreferenceStore().getBoolean(AspectJPreferences.AUTO_OPEN_CROSS_REF_VIEW));
	}
	

	/**
	 * This test accepts the option to open the Cross References view and
	 * accepts the option to remember the decision.
	 */
	public void testAutoOpenCrossReferenceView4() throws CoreException {
		// Re-set start value after previous test turned off prompting
		store.setValue(AspectJPreferences.PROMPT_FOR_AUTO_OPEN_CROSS_REF_VIEW, true);
	
		/*
		 * Kick off the creation of a new Aspect, passing the name and the decision to open 
		 * the cross reference view.
		 */ 
		runCreateAspectWizard("testAutoOpenCrossReferenceViewAspect4", true, true);

		/*
		 * Very important - this is needed to keep things on the correct time
		 * line (results will not be as expected if this call is ommitted)
		 */
		waitForJobsToComplete();

		// Check things are as expected, view-wise...
		assertXRefViewOpen();

		// Check state of preference store - should we do this by creating another aspect as well/instead? 
		assertFalse("Preferences should no longer be set to prompt user re: opening Cross reference View", AspectJUIPlugin
				.getDefault().getPreferenceStore().getBoolean(AspectJPreferences.PROMPT_FOR_AUTO_OPEN_CROSS_REF_VIEW));
		assertTrue("Preferences should be set to open the Cross Reference View on Aspect creation", AspectJUIPlugin
				.getDefault().getPreferenceStore().getBoolean(AspectJPreferences.AUTO_OPEN_CROSS_REF_VIEW));
	}
	

	/**
	 * This test simply opens an existing Aspect and checks that the XRef view also gets
	 * opened, following the choices/settings made in the previous tests.
	 */
	public void testAutoOpenCrossReferenceView5() throws CoreException {
		
		// Check the XRef view is not open to start with
		assertXRefViewClosed();

		/*
		 * Open an existing aspect in the AspectJ Editor
		 */ 
		IFile file = (IFile)testProject.findMember("src/p2/Aspect.aj"); //$NON-NLS-1$
		IEditorPart editor = openFileInDefaultEditor(file, false);
		assertNotNull("AspectJ editor could not be opened", editor);
		
		/*
		 * Very important - this is needed to keep things on the correct time
		 * line (results will not be as expected if this call is ommitted)
		 */
		waitForJobsToComplete();

		// Check things are as expected, view-wise...
		assertXRefViewOpen();
	}
	
	
	// Run the Aspect creation wizard programatically
	private void runCreateAspectWizard(final String aspectName, final boolean openCrossReferenceView, final boolean rememberDecision) {

		display.asyncExec(new Runnable() {
			final TestNewAspectWizardAction testNewAspectWizardAction = new TestNewAspectWizardAction(aspectName);

			public void run() {
				testNewAspectWizardAction.run();
			}
		});

		// Enter the key strokes for choices we need in this test case
		Runnable r = new Runnable() {
			public void run() {
				postKey('F');

				/* Wait for it - very important, so as to ensure key strokes go where we expect 
				 * them to!  This value may need tweaking on a slow system.
				 */
				sleep(10000);

				if (rememberDecision) {
					// select "Remember my decision"
					postKey('R');
				} 

				if (openCrossReferenceView) {
					// Select "Yes" for "Open cross reference view@
					postKey('Y');
				} else {
					// Select "No" for "Don't open cross reference view@
					postKey('N');
				}
			}
		};
		new Thread(r).start();
	}

	/**
	 * This action is called from this test class only and allows the test to
	 * interact with the wizard.
	 */
	private class TestNewAspectWizardAction extends AbstractOpenWizardAction {

		protected TestNewAspectWizardAction(String aspectName) {
			newAspectCreationWizard = new NewAspectCreationWizard();

			newAspectCreationWizard.init(workbench, new MockStructuredSelection(javaTestProject));
			newAspectCreationWizard.addPages();

			// Get a handle to the first page of the wizard
			IWizardPage[] wizardPages = newAspectCreationWizard.getPages();

			NewAspectWizardPage newAspectWizardPage = (NewAspectWizardPage) wizardPages[0];

			// Set the values we want our 'virtual user' to enter :-)
			newAspectWizardPage.setTypeName(aspectName, false);
			newAspectWizardPage.setPackageFragmentRoot(packageFragmentRoot, false);
			newAspectWizardPage.setPackageFragment(defaultPackage, false);

		}

		protected INewWizard createWizard() {
			// Instantiate class variable
			return newAspectCreationWizard;
		}
	}

	private class MockStructuredSelection implements IStructuredSelection {

		// TODO: refactor this to a public class for other tests to reuse?
		private Object elementToSelect = null;

		private MockStructuredSelection(Object elementToSelect) {
			this.elementToSelect = elementToSelect;
		}

		// Return a valid Java element from a test project
		public Object getFirstElement() {
			return elementToSelect;
		}

		public Iterator iterator() {
			return null;
		}

		public int size() {
			return 0;
		}

		public Object[] toArray() {
			return null;
		}

		public List toList() {
			return null;
		}

		public boolean isEmpty() {
			return false;
		}
	}

	/*
	 * Close the Cross References view
	 */
	private void closeXRefView() {
		IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();

		// Reference to workbench page (perspective, for our purposes) for view manipulation
		IWorkbenchPage page = null;
		
		// open Java perspective & keep a reference to it
		try {
			page = PlatformUI.getWorkbench().showPerspective(JavaUI.ID_PERSPECTIVE, window);
		} catch (WorkbenchException e) {
		}

		// Close CrossReference View if open
		IViewReference[] views = AspectJUIPlugin.getDefault().getActiveWorkbenchWindow().getActivePage().getViewReferences();
		for (int i = 0; i < views.length; i++) {
			if (XReferenceView.ID.equals(views[i].getId())) {
				
				if(page != null) {
					page.hideView(views[i]);
				} else {
					fail("Reference to Java perspective page was null, so cannot close Cross Reference view proir to test");
				}
			}
		}
	}

	// Convenience test method to avoid repetition of error string
	private void assertXRefViewOpen(){
		assertTrue("Cross Reference View should be open, but isn't.", XRefUtils.isXRefViewOpen());
	}

	// Convenience test method to avoid repetition of error string
	private void assertXRefViewClosed(){
		assertFalse("Cross Reference View should NOT be open, but is.", XRefUtils.isXRefViewOpen());
	}

}
